The default Python prompt of the interactive shell.  Often seen for codeexamples which can be executed interactively in the interpreter. Can refer to: The default Python prompt of the interactive shell when entering thecode for an indented code block, when within a pair of matching left andright delimiters (parentheses, square brackets, curly braces or triplequotes), or after specifying a decorator. The   built-in constant. A tool that tries to convert Python 2.x code to Python 3.x code byhandling most of the incompatibilities which can be detected by parsing thesource and traversing the parse tree. 2to3 is available in the standard library as  ; a standaloneentry point is provided as  .  See . Abstract base classes complement   byproviding a way to define interfaces when other techniques like  would be clumsy or subtly wrong (for example with ).  ABCs introduce virtualsubclasses, which are classes that don’t inherit from a class but arestill recognized by   and  ; see the  module documentation.  Python comes with many built-in ABCs fordata structures (in the   module), numbers (in the  module), streams (in the   module), import findersand loaders (in the   module).  You can create your ownABCs with the   module. A label associated with a variable, a classattribute or a function parameter or return value,used by convention as a  . Annotations of local variables cannot be accessed at runtime, butannotations of global variables, class attributes, and functionsare stored in the  special attribute of modules, classes, and functions,respectively. See  ,  ,  and  , which describe this functionality. A value passed to a   (or  ) when calling thefunction.  There are two kinds of argument: : an argument preceded by an identifier (e.g. ) in a function call or passed as a value in a dictionarypreceded by  .  For example,   and   are both keywordarguments in the following calls to  : : an argument that is not a keyword argument.Positional arguments can appear at the beginning of an argument listand/or be passed as elements of an   preceded by  .For example,   and   are both positional arguments in thefollowing calls: Arguments are assigned to the named local variables in a function body.See the   section for the rules governing this assignment.Syntactically, any expression can be used to represent an argument; theevaluated value is assigned to the local variable. See also the   glossary entry, the FAQ question on , and  . An object which controls the environment seen in an  statement by defining   and  methods.  Introduced by  . A function which returns an  .  Itlooks like a coroutine function defined with   exceptthat it contains   expressions for producing a series ofvalues usable in an   loop. Usually refers to an asynchronous generator function, but may refer to an  in some contexts.  In cases where theintended meaning isn’t clear, using the full terms avoids ambiguity. An asynchronous generator function may contain  expressions as well as  , and  statements. An object created by a   function. This is an   which when called using the  method returns an awaitable object which will executethe body of the asynchronous generator function until the next  expression. Each   temporarily suspends processing, remembering thelocation execution state (including local variables and pendingtry-statements).  When the   effectivelyresumes with another awaitable returned by  , itpicks up where it left off.  See   and  . An object, that can be used in an   statement.Must return an   from its  method.  Introduced by  . An object that implements the   and  methods.    must return an   object.  resolves the awaitables returned by an asynchronousiterator’s   method until it raises a  exception.  Introduced by  . A value associated with an object which is referenced by name usingdotted expressions.  For example, if an object   has an attribute  it would be referenced as  . An object that can be used in an   expression.  Can bea   or an object with an   method.See also  . Benevolent Dictator For Life, a.k.a.  , Python’s creator. A   able to read and write .Examples of binary files are files opened in binary mode ( ,  or  ),  , , and instances of   and . See also   for a file object able to read and write  objects. An object that supports the   and canexport a C-  buffer. This includes all  , , and   objects, as well as manycommon   objects.  Bytes-like objects canbe used for various operations that work with binary data; these includecompression, saving to a binary file, and sending over a socket. Some operations need the binary data to be mutable.  The documentationoften refers to these as “read-write bytes-like objects”.  Examplemutable buffer objects include   and a  of a  .Other operations require the binary data to be stored inimmutable objects (“read-only bytes-like objects”); examplesof these include   and a  of a   object. Python source code is compiled into bytecode, the internal representationof a Python program in the CPython interpreter.  The bytecode is alsocached in   files so that executing the same file isfaster the second time (recompilation from source to bytecode can beavoided).  This “intermediate language” is said to run on a  that executes the machine code corresponding toeach bytecode. Do note that bytecodes are not expected to work betweendifferent Python virtual machines, nor to be stable between Pythonreleases. A list of bytecode instructions can be found in the documentation for . A template for creating user-defined objects. Class definitionsnormally contain method definitions which operate on instances of theclass. A variable defined in a class and intended to be modified only atclass level (i.e., not in an instance of the class). The implicit conversion of an instance of one type to another during anoperation which involves two arguments of the same type.  For example,  converts the floating point number to the integer  , butin  , each argument is of a different type (one int, one float),and both must be converted to the same type before they can be added or itwill raise a  .  Without coercion, all arguments of evencompatible types would have to be normalized to the same value by theprogrammer, e.g.,   rather than just  . An extension of the familiar real number system in which all numbers areexpressed as a sum of a real part and an imaginary part.  Imaginarynumbers are real multiples of the imaginary unit (the square root of ), often written   in mathematics or   inengineering.  Python has built-in support for complex numbers, which arewritten with this latter notation; the imaginary part is written with a  suffix, e.g.,  .  To get access to complex equivalents of the  module, use  .  Use of complex numbers is a fairlyadvanced mathematical feature.  If you’re not aware of a need for them,it’s almost certain you can safely ignore them. An object which controls the environment seen in a  statement by defining   and   methods.See  . A variable which can have different values depending on its context.This is similar to Thread-Local Storage in which each executionthread may have a different value for a variable. However, with contextvariables, there may be several contexts in one execution thread and themain usage for context variables is to keep track of variables inconcurrent asynchronous tasks.See  . A buffer is considered contiguous exactly if it is either  or  .  Zero-dimensional buffers areC and Fortran contiguous.  In one-dimensional arrays, the itemsmust be laid out in memory next to each other, in order ofincreasing indexes starting from zero.  In multidimensionalC-contiguous arrays, the last index varies the fastest whenvisiting items in order of memory address.  However, inFortran contiguous arrays, the first index varies the fastest. Coroutines are a more generalized form of subroutines. Subroutines areentered at one point and exited at another point.  Coroutines can beentered, exited, and resumed at many different points.  They can beimplemented with the   statement.  See also . A function which returns a   object.  A coroutinefunction may be defined with the   statement,and may contain  ,  , and  keywords.  These were introducedby  . The canonical implementation of the Python programming language, asdistributed on  .  The term “CPython”is used when necessary to distinguish this implementation from otherssuch as Jython or IronPython. A function returning another function, usually applied as a functiontransformation using the   syntax.  Common examples fordecorators are   and  . The decorator syntax is merely syntactic sugar, the following twofunction definitions are semantically equivalent: The same concept exists for classes, but is less commonly used there.  Seethe documentation for   and  for more about decorators. Any object which defines the methods  ,  , or .  When a class attribute is a descriptor, its specialbinding behavior is triggered upon attribute lookup.  Normally, using  to get, set or delete an attribute looks up the object named   inthe class dictionary for  , but if   is a descriptor, the respectivedescriptor method gets called.  Understanding descriptors is a key to adeep understanding of Python because they are the basis for many featuresincluding functions, methods, properties, class methods, static methods,and reference to super classes. For more information about descriptors’ methods, see  . An associative array, where arbitrary keys are mapped to values.  Thekeys can be any object with   and   methods.Called a hash in Perl. The objects returned from  ,  , and  are called dictionary views. They provide a dynamicview on the dictionary’s entries, which means that when the dictionarychanges, the view reflects these changes. To force thedictionary view to become a full list use  .  See . A string literal which appears as the first expression in a class,function or module.  While ignored when the suite is executed, it isrecognized by the compiler and put into the   attributeof the enclosing class, function or module.  Since it is available viaintrospection, it is the canonical place for documentation of theobject. A programming style which does not look at an object’s type to determineif it has the right interface; instead, the method or attribute is simplycalled or used (“If it looks like a duck and quacks like a duck, itmust be a duck.”)  By emphasizing interfaces rather than specific types,well-designed code improves its flexibility by allowing polymorphicsubstitution.  Duck-typing avoids tests using   or .  (Note, however, that duck-typing can be complementedwith  .)  Instead, ittypically employs   tests or   programming. Easier to ask for forgiveness than permission.  This common Python codingstyle assumes the existence of valid keys or attributes and catchesexceptions if the assumption proves false.  This clean and fast style ischaracterized by the presence of many   and  statements.  The technique contrasts with the   stylecommon to many other languages such as C. A piece of syntax which can be evaluated to some value.  In other words,an expression is an accumulation of expression elements like literals,names, attribute access, operators or function calls which all return avalue.  In contrast to many other languages, not all language constructsare expressions.  There are also  s which cannot be usedas expressions, such as  .  Assignments are also statements,not expressions. A module written in C or C++, using Python’s C API to interact with thecore and with user code. String literals prefixed with   or   are commonly called“f-strings” which is short for .  See also  . An object exposing a file-oriented API (with methods such as  or  ) to an underlying resource.  Dependingon the way it was created, a file object can mediate access to a realon-disk file or to another type of storage or communication device(for example standard input/output, in-memory buffers, sockets, pipes,etc.).  File objects are also called   or . There are actually three categories of file objects: raw , buffered  and  .Their interfaces are defined in the   module.  The canonicalway to create a file object is by using the   function. A synonym for  . An object that tries to find the   for a module that isbeing imported. Since Python 3.3, there are two types of finder:   for use with  , and   for use with  . See  ,   and   for much more detail. Mathematical division that rounds down to nearest integer.  The floordivision operator is  .  For example, the expression  evaluates to   in contrast to the   returned by float truedivision.  Note that   is   because that is  rounded  . See  . A series of statements which returns some value to a caller. It can alsobe passed zero or more   which may be used inthe execution of the body. See also  ,  ,and the   section. An   of a function parameter or return value. Function annotations are usually used for : for example, this function is expected to take two  arguments and is also expected to have an  return value: Function annotation syntax is explained in section  . See   and  ,which describe this functionality. A pseudo-module which programmers can use to enable new language featureswhich are not compatible with the current interpreter. By importing the   module and evaluating its variables,you can see when a new feature was first added to the language and when itbecomes the default: The process of freeing memory when it is not used anymore.  Pythonperforms garbage collection via reference counting and a cyclic garbagecollector that is able to detect and break reference cycles.  Thegarbage collector can be controlled using the   module. A function which returns a  .  It looks like anormal function except that it contains   expressionsfor producing a series of values usable in a for-loop or that can beretrieved one at a time with the   function. Usually refers to a generator function, but may refer to a  in some contexts.  In cases where the intendedmeaning isn’t clear, using the full terms avoids ambiguity. An object created by a   function. Each   temporarily suspends processing, remembering thelocation execution state (including local variables and pendingtry-statements).  When the   resumes, it picks up whereit left off (in contrast to functions which start fresh on everyinvocation). An expression that returns an iterator.  It looks like a normal expressionfollowed by a   clause defining a loop variable, range,and an optional   clause.  The combined expressiongenerates values for an enclosing function: A function composed of multiple functions implementing the same operationfor different types. Which implementation should be used during a call isdetermined by the dispatch algorithm. See also the   glossary entry, the  decorator, and  . See  . The mechanism used by the   interpreter to assure thatonly one thread executes Python   at a time.This simplifies the CPython implementation by making the object model(including critical built-in types such as  ) implicitlysafe against concurrent access.  Locking the entire interpretermakes it easier for the interpreter to be multi-threaded, at theexpense of much of the parallelism afforded by multi-processormachines. However, some extension modules, either standard or third-party,are designed so as to release the GIL when doing computationally-intensivetasks such as compression or hashing.  Also, the GIL is always releasedwhen doing I/O. Past efforts to create a “free-threaded” interpreter (one which locksshared data at a much finer granularity) have not been successfulbecause performance suffered in the common single-processor case. Itis believed that overcoming this performance issue would make theimplementation much more complicated and therefore costlier to maintain. A bytecode cache file that uses the hash rather than the last-modifiedtime of the corresponding source file to determine its validity. See . An object is   if it has a hash value which never changes duringits lifetime (it needs a   method), and can be compared toother objects (it needs an   method).  Hashable objects whichcompare equal must have the same hash value. Hashability makes an object usable as a dictionary key and a set member,because these data structures use the hash value internally. Most of Python’s immutable built-in objects are hashable; mutablecontainers (such as lists or dictionaries) are not; immutablecontainers (such as tuples and frozensets) are only hashable iftheir elements are hashable.  Objects which areinstances of user-defined classes are hashable by default.  They allcompare unequal (except with themselves), and their hash value is derivedfrom their  . An Integrated Development Environment for Python.  IDLE is a basic editorand interpreter environment which ships with the standard distribution ofPython. An object with a fixed value.  Immutable objects include numbers, strings andtuples.  Such an object cannot be altered.  A new object has tobe created if a different value has to be stored.  They play an importantrole in places where a constant hash value is needed, for example as a keyin a dictionary. A list of locations (or  ) that aresearched by the   for modules to import. Duringimport, this list of locations usually comes from  , butfor subpackages it may also come from the parent package’s  attribute. The process by which Python code in one module is made available toPython code in another module. An object that both finds and loads a module; both a  and   object. Python has an interactive interpreter which means you can enterstatements and expressions at the interpreter prompt, immediatelyexecute them and see their results.  Just launch   with noarguments (possibly by selecting it from your computer’s mainmenu). It is a very powerful way to test out new ideas or inspectmodules and packages (remember  ). Python is an interpreted language, as opposed to a compiled one,though the distinction can be blurry because of the presence of thebytecode compiler.  This means that source files can be run directlywithout explicitly creating an executable which is then run.Interpreted languages typically have a shorter development/debug cyclethan compiled ones, though their programs generally also run moreslowly.  See also  . When asked to shut down, the Python interpreter enters a special phasewhere it gradually releases all allocated resources, such as modulesand various critical internal structures.  It also makes several callsto the  . This can triggerthe execution of code in user-defined destructors or weakref callbacks.Code executed during the shutdown phase can encounter variousexceptions as the resources it relies on may not function anymore(common examples are library modules or the warnings machinery). The main reason for interpreter shutdown is that the   moduleor the script being run has finished executing. An object capable of returning its members one at a time. Examples ofiterables include all sequence types (such as  ,  ,and  ) and some non-sequence types like  , , and objects of any classes you definewith an   method or with a   methodthat implements   semantics. Iterables can beused in a   loop and in many other places where a sequence isneeded ( ,  , …).  When an iterable object is passedas an argument to the built-in function  , it returns aniterator for the object.  This iterator is good for one pass over the setof values.  When using iterables, it is usually not necessary to call  or deal with iterator objects yourself.  The  statement does that automatically for you, creating a temporary unnamedvariable to hold the iterator for the duration of the loop.  See also ,  , and  . An object representing a stream of data.  Repeated calls to the iterator’s  method (or passing it to the built-in function ) return successive items in the stream.  When no more dataare available a   exception is raised instead.  At thispoint, the iterator object is exhausted and any further calls to its  method just raise   again.  Iteratorsare required to have an   method that returns the iteratorobject itself so every iterator is also iterable and may be used in mostplaces where other iterables are accepted.  One notable exception is codewhich attempts multiple iteration passes.  A container object (such as a ) produces a fresh new iterator each time you pass it to the  function or use it in a   loop.  Attempting thiswith an iterator will just return the same exhausted iterator object usedin the previous iteration pass, making it appear like an empty container. More information can be found in  . A key function or collation function is a callable that returns a valueused for sorting or ordering.  For example,   isused to produce a sort key that is aware of locale specific sortconventions. A number of tools in Python accept key functions to control how elementsare ordered or grouped.  They include  ,  , ,  ,  , ,  , and . There are several ways to create a key function.  For example. the  method can serve as a key function for case insensitivesorts.  Alternatively, a key function can be built from a  expression such as  .  Also,the   module provides three key function constructors: ,  , and .  See the   for examples of how to create and use key functions. See  . An anonymous inline function consisting of a single  which is evaluated when the function is called.  The syntax to createa lambda function is  Look before you leap.  This coding style explicitly tests forpre-conditions before making calls or lookups.  This style contrasts withthe   approach and is characterized by the presence of many  statements. In a multi-threaded environment, the LBYL approach can risk introducing arace condition between “the looking” and “the leaping”.  For example, thecode,   can fail if anotherthread removes   from   after the test, but before the lookup.This issue can be solved with locks or by using the EAFP approach. A built-in Python  .  Despite its name it is more akinto an array in other languages than to a linked list since access toelements is O(1). A compact way to process all or part of the elements in a sequence andreturn a list with the results.    generates a list of strings containingeven hex numbers (0x..) in the range from 0 to 255. The  clause is optional.  If omitted, all elements in   areprocessed. An object that loads a module. It must define a method named . A loader is typically returned by a . See   for details and  for an  . An informal synonym for  . A container object that supports arbitrary key lookups and implements themethods specified in the   or  .  Examplesinclude  ,  ,  and  . A   returned by a search of  .  Meta pathfinders are related to, but different from  . See   for the methods that meta pathfinders implement. The class of a class.  Class definitions create a class name, a classdictionary, and a list of base classes.  The metaclass is responsible fortaking those three arguments and creating the class.  Most object orientedprogramming languages provide a default implementation.  What makes Pythonspecial is that it is possible to create custom metaclasses.  Most usersnever need this tool, but when the need arises, metaclasses can providepowerful, elegant solutions.  They have been used for logging attributeaccess, adding thread-safety, tracking object creation, implementingsingletons, and many other tasks. More information can be found in  . A function which is defined inside a class body.  If called as an attributeof an instance of that class, the method will get the instance object asits first   (which is usually called  ).See   and  . Method Resolution Order is the order in which base classes are searchedfor a member during lookup. See   for details of thealgorithm used by the Python interpreter since the 2.3 release. An object that serves as an organizational unit of Python code.  Moduleshave a namespace containing arbitrary Python objects.  Modules are loadedinto Python by the process of  . See also  . A namespace containing the import-related information used to load amodule. An instance of  . See  . Mutable objects can change their value but keep their  .  Seealso  . The term “named tuple” applies to any type or class that inherits fromtuple and whose indexable elements are also accessible using namedattributes.  The type or class may have other features as well. Several built-in types are named tuples, including the values returnedby   and  .  Another example is : Some named tuples are built-in types (such as the above examples).Alternatively, a named tuple can be created from a regular classdefinition that inherits from   and that defines namedfields.  Such a class can be written by hand or it can be created withthe factory function  .  The lattertechnique also adds some extra methods that may not be found inhand-written or built-in named tuples. The place where a variable is stored.  Namespaces are implemented asdictionaries.  There are the local, global and built-in namespaces as wellas nested namespaces in objects (in methods).  Namespaces supportmodularity by preventing naming conflicts.  For instance, the functions  and   are distinguished bytheir namespaces.  Namespaces also aid readability and maintainability bymaking it clear which module implements a function.  For instance, writing  or   makes it clear that thosefunctions are implemented by the   and  modules, respectively. A     which serves only as a container forsubpackages.  Namespace packages may have no physical representation,and specifically are not like a   because theyhave no   file. See also  . The ability to refer to a variable in an enclosing definition.  Forinstance, a function defined inside another function can refer tovariables in the outer function.  Note that nested scopes by default workonly for reference and not for assignment.  Local variables both read andwrite in the innermost scope.  Likewise, global variables read and writeto the global namespace.  The   allows writing to outerscopes. Old name for the flavor of classes now used for all class objects.  Inearlier Python versions, only new-style classes could use Python’s newer,versatile features like  , descriptors,properties,  , class methods, and static methods. Any data with state (attributes or value) and defined behavior(methods).  Also the ultimate base class of any  . A Python   which can contain submodules or recursively,subpackages.  Technically, a package is a Python module with an  attribute. See also   and  . A named entity in a   (or method) definition thatspecifies an   (or in some cases, arguments) that thefunction can accept.  There are five kinds of parameter: : specifies an argument that can be passedeither   or as a  .  This is the default kind of parameter, for example  and   in the following: : specifies an argument that can be supplied onlyby position. Positional-only parameters can be defined by including a  character in the parameter list of the function definition afterthem, for example   and   in the following: : specifies an argument that can be supplied onlyby keyword.  Keyword-only parameters can be defined by including asingle var-positional parameter or bare   in the parameter listof the function definition before them, for example   and  in the following: : specifies that an arbitrary sequence ofpositional arguments can be provided (in addition to any positionalarguments already accepted by other parameters).  Such a parameter canbe defined by prepending the parameter name with  , for example  in the following: : specifies that arbitrarily many keyword argumentscan be provided (in addition to any keyword arguments already acceptedby other parameters).  Such a parameter can be defined by prependingthe parameter name with  , for example   in the exampleabove. Parameters can specify both optional and required arguments, as well asdefault values for some optional arguments. See also the   glossary entry, the FAQ question on , the   class, the  section, and  . A single location on the   which the   consults to find modules for importing. A   returned by a callable on  (i.e. a  ) which knows how to locate modules givena  . See   for the methods that path entryfinders implement. A callable on the   list which returns a   if it knows how to find modules on a specific  . One of the default   whichsearches an   for modules. An object representing a file system path. A path-like object is eithera   or   object representing a path, or an objectimplementing the   protocol. An object that supportsthe   protocol can be converted to a   or  file system path by calling the   function;  and   can be used to guarantee a  or   result instead, respectively. Introducedby  . Python Enhancement Proposal. A PEP is a design documentproviding information to the Python community, or describing a newfeature for Python or its processes or environment. PEPs shouldprovide a concise technical specification and a rationale for proposedfeatures. PEPs are intended to be the primary mechanisms for proposing major newfeatures, for collecting community input on an issue, and for documentingthe design decisions that have gone into Python. The PEP author isresponsible for building consensus within the community and documentingdissenting opinions. See  . A set of files in a single directory (possibly stored in a zip file)that contribute to a namespace package, as defined in  . See  . A provisional API is one which has been deliberately excluded fromthe standard library’s backwards compatibility guarantees.  While majorchanges to such interfaces are not expected, as long as they are markedprovisional, backwards incompatible changes (up to and including removalof the interface) may occur if deemed necessary by core developers.  Suchchanges will not be made gratuitously – they will occur only if seriousfundamental flaws are uncovered that were missed prior to the inclusionof the API. Even for provisional APIs, backwards incompatible changes are seen asa “solution of last resort” - every attempt will still be made to finda backwards compatible resolution to any identified problems. This process allows the standard library to continue to evolve overtime, without locking in problematic design errors for extended periodsof time.  See   for more details. See  . Nickname for the Python 3.x release line (coined long ago when therelease of version 3 was something in the distant future.)  This is alsoabbreviated “Py3k”. An idea or piece of code which closely follows the most common idiomsof the Python language, rather than implementing code using conceptscommon to other languages.  For example, a common idiom in Python isto loop over all elements of an iterable using a  statement.  Many other languages don’t have this type of construct, sopeople unfamiliar with Python sometimes use a numerical counter instead: As opposed to the cleaner, Pythonic method: A dotted name showing the “path” from a module’s global scope to aclass, function or method defined in that module, as defined in .  For top-level functions and classes, the qualified nameis the same as the object’s name: When used to refer to modules, the   means theentire dotted path to the module, including any parent packages,e.g.  : The number of references to an object.  When the reference count of anobject drops to zero, it is deallocated.  Reference counting isgenerally not visible to Python code, but it is a key element of the  implementation.  The   module defines a  function that programmers can call to return thereference count for a particular object. A traditional  , such as a directory containing an  file. See also  . A declaration inside a class that saves memory by pre-declaring space forinstance attributes and eliminating instance dictionaries.  Thoughpopular, the technique is somewhat tricky to get right and is bestreserved for rare cases where there are large numbers of instances in amemory-critical application. An   which supports efficient element access using integerindices via the   special method and defines a  method that returns the length of the sequence.Some built-in sequence types are  ,  , , and  . Note that   alsosupports   and  , but is considered amapping rather than a sequence because the lookups use arbitrary  keys rather than integers. The   abstract base classdefines a much richer interface that goes beyond just  and  , adding  , ,  , and . Types that implement this expandedinterface can be registered explicitly using . A form of   dispatch where the implementation ischosen based on the type of a single argument. An object usually containing a portion of a  .  A slice iscreated using the subscript notation,   with colons between numberswhen several are given, such as in  .  The bracket(subscript) notation uses   objects internally. A method that is called implicitly by Python to execute a certainoperation on a type, such as addition.  Such methods have names startingand ending with double underscores.  Special methods are documented in . A statement is part of a suite (a “block” of code).  A statement is eitheran   or one of several constructs with a keyword, suchas  ,   or  . A codec which encodes Unicode strings to bytes. A   able to read and write   objects.Often, a text file actually accesses a byte-oriented datastreamand handles the   automatically.Examples of text files are files opened in text mode (  or  ), ,  , and instances of . See also   for a file object able to read and write . A string which is bound by three instances of either a quotation mark(“) or an apostrophe (‘).  While they don’t provide any functionalitynot available with single-quoted strings, they are useful for a numberof reasons.  They allow you to include unescaped single and doublequotes within a string and they can span multiple lines without theuse of the continuation character, making them especially useful whenwriting docstrings. The type of a Python object determines what kind of object it is; everyobject has a type.  An object’s type is accessible as its  attribute or can be retrieved with . A synonym for a type, created by assigning the type to an identifier. Type aliases are useful for simplifying  .For example: could be made more readable like this: See   and  , which describe this functionality. An   that specifies the expected type for a variable, a classattribute, or a function parameter or return value. Type hints are optional and are not enforced by Python butthey are useful to static type analysis tools, and aid IDEs with codecompletion and refactoring. Type hints of global variables, class attributes, and functions,but not local variables, can be accessed using . See   and  , which describe this functionality. A manner of interpreting text streams in which all of the following arerecognized as ending a line: the Unix end-of-line convention  ,the Windows convention  , and the old Macintosh convention .  See   and  , as well as  for an additional use. An   of a variable or a class attribute. When annotating a variable or a class attribute, assignment is optional: Variable annotations are usually used for : for example this variable is expected to take  values: Variable annotation syntax is explained in section  . See  ,  and  , which describe this functionality. A cooperatively isolated runtime environment that allows Python usersand applications to install and upgrade Python distribution packageswithout interfering with the behaviour of other Python applicationsrunning on the same system. See also  . A computer defined entirely in software.  Python’s virtual machineexecutes the   emitted by the bytecode compiler. Listing of Python design principles and philosophies that are helpful inunderstanding and using the language.  The listing can be found by typing“ ” at the interactive prompt.